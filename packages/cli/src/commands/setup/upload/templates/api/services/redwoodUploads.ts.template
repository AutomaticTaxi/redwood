import { createUploadToken } from '@redwoodjs/upload'
import type { UploadTokenPayload } from '@redwoodjs/upload'

import type { GraphQLResolveInfo } from 'graphql'

import type { RedwoodGraphQLContext } from '@redwoodjs/graphql-server/dist/types'

export interface RedwoodUploadToken {
  __typename?: 'RedwoodUploadToken'
  token: string
}

export interface RTRedwoodUploadToken {
  __typename?: 'RedwoodUploadToken'
  token: string
}

export interface Query {
  __typename?: 'Query'
  getRedwoodUploadToken: RedwoodUploadToken
}

export interface GetRedwoodUploadTokenResolver {
  (
    args: { operationName: string },
    obj?: {
      root: Query

      context: RedwoodGraphQLContext
      info: GraphQLResolveInfo
    },
  ): Promise<RTRedwoodUploadToken>
}

export const getRedwoodUploadToken: GetRedwoodUploadTokenResolver = async ({
  operationName,
}) => {
  // Note: based on the operation name, we could configure the content types, max file size, etc

  const payload: UploadTokenPayload = {
    operationName,
    minFiles: 2,
    maxFiles: 5,
    expiresIn: 24 * 60 * 60,
    maxFileSize: 1 * 1024 * 1024, // 1MB
  }

  const token = createUploadToken(payload)

  return { token }
}
